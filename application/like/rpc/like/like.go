// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.4
// Source: like.proto

package like

import (
	"context"

	"posta/application/like/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	IsLikedRequest     = pb.IsLikedRequest
	IsLikedResponse    = pb.IsLikedResponse
	LikeActionRequest  = pb.LikeActionRequest
	LikeActionResponse = pb.LikeActionResponse
	LikeCountRequest   = pb.LikeCountRequest
	LikeCountResponse  = pb.LikeCountResponse

	Like interface {
		// 用户对某个对象点赞或取消点赞
		LikeAction(ctx context.Context, in *LikeActionRequest, opts ...grpc.CallOption) (*LikeActionResponse, error)
		// 查询用户是否点赞（单个）
		IsLiked(ctx context.Context, in *IsLikedRequest, opts ...grpc.CallOption) (*IsLikedResponse, error)
		// 查询点赞数（单个）
		LikeCount(ctx context.Context, in *LikeCountRequest, opts ...grpc.CallOption) (*LikeCountResponse, error)
	}

	defaultLike struct {
		cli zrpc.Client
	}
)

func NewLike(cli zrpc.Client) Like {
	return &defaultLike{
		cli: cli,
	}
}

// 用户对某个对象点赞或取消点赞
func (m *defaultLike) LikeAction(ctx context.Context, in *LikeActionRequest, opts ...grpc.CallOption) (*LikeActionResponse, error) {
	client := pb.NewLikeClient(m.cli.Conn())
	return client.LikeAction(ctx, in, opts...)
}

// 查询用户是否点赞（单个）
func (m *defaultLike) IsLiked(ctx context.Context, in *IsLikedRequest, opts ...grpc.CallOption) (*IsLikedResponse, error) {
	client := pb.NewLikeClient(m.cli.Conn())
	return client.IsLiked(ctx, in, opts...)
}

// 查询点赞数（单个）
func (m *defaultLike) LikeCount(ctx context.Context, in *LikeCountRequest, opts ...grpc.CallOption) (*LikeCountResponse, error) {
	client := pb.NewLikeClient(m.cli.Conn())
	return client.LikeCount(ctx, in, opts...)
}
