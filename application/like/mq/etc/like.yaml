Name: like_mq
DataSource: root:2000@tcp(127.0.0.1:3306)/posta_like?parseTime=true&loc=Local
KqConsumerConf:
  Name: like-kq-consumer
  Brokers: # Kafka broker 的地址列表，格式为 "host:port"，可以配置多个，Go-Zero 会自动连接并管理。
    - 127.0.0.1:9092
  # 同一个 partition 在组内只能由一个消费者消费，每个 Group 有自己独立的消费进度（offset）。
  # 举例：有 3 个 partition，Group 内有 3 个消费者，Kafka 会尽可能让每个消费者消费不同的 partition。
  # 注意：这里是把当前服务作为一个消费者加入到group-posta-like 消费者组中。
  Group: group-posta-like
  Topic: topic-posta-like # 要消费的 Kafka topic 名称，即订阅的主题，比如 "topic-posta-like"。
  # 消费起始偏移量，可以设置为：
  #- first：从最早的消息开始消费（一般用于首次启动或者测试）
  #- last：从最新的消息开始消费，忽略历史消息（常用于线上业务）。注意：仍然为队列，只是当你的消费者第一次启动时，它不会读过去已经存在的消息，而是等 Kafka 中有新消息进来时才开始处理。
  Offset: last
  # 并发消费者数量，Go-Zero 会开启这么多 goroutine 去消费 Kafka 消息。注意：并发数量最好不超过该 topic 的 partition 数。
  # 设置大于1的值的意义是，当前服务作为消费者可以消费多个partition（如果有这个需求）。
  Consumers: 1
  # 消息处理器的数量，即处理函数的并发度。通常与 Consumers 数一致。
  Processors: 1

  # 注意：这里的consumer和kafka中的消费者是不同的概念。
  # | 维度   | 单服务多线程（Consumers 多）            | 多服务多实例（多个服务加入同一 Group）              |
  #| ---- | ------------------------------ | ----------------------------------- |
  #| 级别   | 线程级并发                          | 进程级（服务级）并发                          |
  #| 扩展方式 | 纵向扩展（scale-up）                 | 横向扩展（scale-out）                     |
  #| 分区分配 | 所有 partition 会被分配给该服务的不同线程轮流消费 | Kafka 会自动把 partition 分配到多个服务，真正并行消费 |
  #| 容错性  | 只有一个服务，挂了全挂                    | 多个服务，某个挂掉可以被重分配                     |
  #| 资源利用 | 多核 CPU 可以高效利用                  | 多机、多容器集群可以分散负载                      |
  #| 部署成本 | 简单                             | 灵活（可跨容器、跨机器）                        |

BizRedis:
  Host: 127.0.0.1:6379
  Pass:
  Type: node
