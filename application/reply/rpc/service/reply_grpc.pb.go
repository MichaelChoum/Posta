// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: reply.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Reply_ReplyPublish_FullMethodName   = "/service.Reply/ReplyPublish"
	Reply_ReplyDelete_FullMethodName    = "/service.Reply/ReplyDelete"
	Reply_Replies_FullMethodName        = "/service.Reply/Replies"
	Reply_GetReplyThread_FullMethodName = "/service.Reply/GetReplyThread"
)

// ReplyClient is the client API for Reply service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReplyClient interface {
	ReplyPublish(ctx context.Context, in *ReplyPublishRequest, opts ...grpc.CallOption) (*ReplyPublishResponse, error)
	ReplyDelete(ctx context.Context, in *ReplyDeleteRequest, opts ...grpc.CallOption) (*ReplyDeleteResponse, error)
	// 可以查看文章的一级评论，也可以查看一级评论下的二级评论
	Replies(ctx context.Context, in *RepliesRequest, opts ...grpc.CallOption) (*RepliesResponse, error)
	// 可以查看二级评论下的对话链。
	GetReplyThread(ctx context.Context, in *GetReplyThreadRequest, opts ...grpc.CallOption) (*GetReplyThreadResponse, error)
}

type replyClient struct {
	cc grpc.ClientConnInterface
}

func NewReplyClient(cc grpc.ClientConnInterface) ReplyClient {
	return &replyClient{cc}
}

func (c *replyClient) ReplyPublish(ctx context.Context, in *ReplyPublishRequest, opts ...grpc.CallOption) (*ReplyPublishResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplyPublishResponse)
	err := c.cc.Invoke(ctx, Reply_ReplyPublish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replyClient) ReplyDelete(ctx context.Context, in *ReplyDeleteRequest, opts ...grpc.CallOption) (*ReplyDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplyDeleteResponse)
	err := c.cc.Invoke(ctx, Reply_ReplyDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replyClient) Replies(ctx context.Context, in *RepliesRequest, opts ...grpc.CallOption) (*RepliesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RepliesResponse)
	err := c.cc.Invoke(ctx, Reply_Replies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replyClient) GetReplyThread(ctx context.Context, in *GetReplyThreadRequest, opts ...grpc.CallOption) (*GetReplyThreadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReplyThreadResponse)
	err := c.cc.Invoke(ctx, Reply_GetReplyThread_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReplyServer is the server API for Reply service.
// All implementations must embed UnimplementedReplyServer
// for forward compatibility.
type ReplyServer interface {
	ReplyPublish(context.Context, *ReplyPublishRequest) (*ReplyPublishResponse, error)
	ReplyDelete(context.Context, *ReplyDeleteRequest) (*ReplyDeleteResponse, error)
	// 可以查看文章的一级评论，也可以查看一级评论下的二级评论
	Replies(context.Context, *RepliesRequest) (*RepliesResponse, error)
	// 可以查看二级评论下的对话链。
	GetReplyThread(context.Context, *GetReplyThreadRequest) (*GetReplyThreadResponse, error)
	mustEmbedUnimplementedReplyServer()
}

// UnimplementedReplyServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReplyServer struct{}

func (UnimplementedReplyServer) ReplyPublish(context.Context, *ReplyPublishRequest) (*ReplyPublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplyPublish not implemented")
}
func (UnimplementedReplyServer) ReplyDelete(context.Context, *ReplyDeleteRequest) (*ReplyDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplyDelete not implemented")
}
func (UnimplementedReplyServer) Replies(context.Context, *RepliesRequest) (*RepliesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Replies not implemented")
}
func (UnimplementedReplyServer) GetReplyThread(context.Context, *GetReplyThreadRequest) (*GetReplyThreadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReplyThread not implemented")
}
func (UnimplementedReplyServer) mustEmbedUnimplementedReplyServer() {}
func (UnimplementedReplyServer) testEmbeddedByValue()               {}

// UnsafeReplyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReplyServer will
// result in compilation errors.
type UnsafeReplyServer interface {
	mustEmbedUnimplementedReplyServer()
}

func RegisterReplyServer(s grpc.ServiceRegistrar, srv ReplyServer) {
	// If the following call pancis, it indicates UnimplementedReplyServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Reply_ServiceDesc, srv)
}

func _Reply_ReplyPublish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplyPublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplyServer).ReplyPublish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reply_ReplyPublish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplyServer).ReplyPublish(ctx, req.(*ReplyPublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reply_ReplyDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplyDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplyServer).ReplyDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reply_ReplyDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplyServer).ReplyDelete(ctx, req.(*ReplyDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reply_Replies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepliesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplyServer).Replies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reply_Replies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplyServer).Replies(ctx, req.(*RepliesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reply_GetReplyThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReplyThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplyServer).GetReplyThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reply_GetReplyThread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplyServer).GetReplyThread(ctx, req.(*GetReplyThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Reply_ServiceDesc is the grpc.ServiceDesc for Reply service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Reply_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.Reply",
	HandlerType: (*ReplyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReplyPublish",
			Handler:    _Reply_ReplyPublish_Handler,
		},
		{
			MethodName: "ReplyDelete",
			Handler:    _Reply_ReplyDelete_Handler,
		},
		{
			MethodName: "Replies",
			Handler:    _Reply_Replies_Handler,
		},
		{
			MethodName: "GetReplyThread",
			Handler:    _Reply_GetReplyThread_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reply.proto",
}
