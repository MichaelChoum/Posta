// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.4
// Source: reply.proto

package reply

import (
	"context"

	"posta/application/reply/rpc/service"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GetReplyThreadRequest  = service.GetReplyThreadRequest
	GetReplyThreadResponse = service.GetReplyThreadResponse
	RepliesRequest         = service.RepliesRequest
	RepliesResponse        = service.RepliesResponse
	ReplyDeleteRequest     = service.ReplyDeleteRequest
	ReplyDeleteResponse    = service.ReplyDeleteResponse
	ReplyItem              = service.ReplyItem
	ReplyPublishRequest    = service.ReplyPublishRequest
	ReplyPublishResponse   = service.ReplyPublishResponse

	Reply interface {
		ReplyPublish(ctx context.Context, in *ReplyPublishRequest, opts ...grpc.CallOption) (*ReplyPublishResponse, error)
		ReplyDelete(ctx context.Context, in *ReplyDeleteRequest, opts ...grpc.CallOption) (*ReplyDeleteResponse, error)
		// 可以查看文章的一级评论，也可以查看一级评论下的二级评论
		Replies(ctx context.Context, in *RepliesRequest, opts ...grpc.CallOption) (*RepliesResponse, error)
		// 可以查看二级评论下的对话链。
		GetReplyThread(ctx context.Context, in *GetReplyThreadRequest, opts ...grpc.CallOption) (*GetReplyThreadResponse, error)
	}

	defaultReply struct {
		cli zrpc.Client
	}
)

func NewReply(cli zrpc.Client) Reply {
	return &defaultReply{
		cli: cli,
	}
}

func (m *defaultReply) ReplyPublish(ctx context.Context, in *ReplyPublishRequest, opts ...grpc.CallOption) (*ReplyPublishResponse, error) {
	client := service.NewReplyClient(m.cli.Conn())
	return client.ReplyPublish(ctx, in, opts...)
}

func (m *defaultReply) ReplyDelete(ctx context.Context, in *ReplyDeleteRequest, opts ...grpc.CallOption) (*ReplyDeleteResponse, error) {
	client := service.NewReplyClient(m.cli.Conn())
	return client.ReplyDelete(ctx, in, opts...)
}

// 可以查看文章的一级评论，也可以查看一级评论下的二级评论
func (m *defaultReply) Replies(ctx context.Context, in *RepliesRequest, opts ...grpc.CallOption) (*RepliesResponse, error) {
	client := service.NewReplyClient(m.cli.Conn())
	return client.Replies(ctx, in, opts...)
}

// 可以查看二级评论下的对话链。
func (m *defaultReply) GetReplyThread(ctx context.Context, in *GetReplyThreadRequest, opts ...grpc.CallOption) (*GetReplyThreadResponse, error) {
	client := service.NewReplyClient(m.cli.Conn())
	return client.GetReplyThread(ctx, in, opts...)
}
