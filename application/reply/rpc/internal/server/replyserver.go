// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.4
// Source: reply.proto

package server

import (
	"context"

	"posta/application/reply/rpc/internal/logic"
	"posta/application/reply/rpc/internal/svc"
	"posta/application/reply/rpc/service"
)

type ReplyServer struct {
	svcCtx *svc.ServiceContext
	service.UnimplementedReplyServer
}

func NewReplyServer(svcCtx *svc.ServiceContext) *ReplyServer {
	return &ReplyServer{
		svcCtx: svcCtx,
	}
}

func (s *ReplyServer) ReplyPublish(ctx context.Context, in *service.ReplyPublishRequest) (*service.ReplyPublishResponse, error) {
	l := logic.NewReplyPublishLogic(ctx, s.svcCtx)
	return l.ReplyPublish(in)
}

func (s *ReplyServer) ReplyDelete(ctx context.Context, in *service.ReplyDeleteRequest) (*service.ReplyDeleteResponse, error) {
	l := logic.NewReplyDeleteLogic(ctx, s.svcCtx)
	return l.ReplyDelete(in)
}

// 可以查看文章的一级评论，也可以查看一级评论下的二级评论
func (s *ReplyServer) Replies(ctx context.Context, in *service.RepliesRequest) (*service.RepliesResponse, error) {
	l := logic.NewRepliesLogic(ctx, s.svcCtx)
	return l.Replies(in)
}

// 可以查看二级评论下的对话链。
func (s *ReplyServer) GetReplyThread(ctx context.Context, in *service.GetReplyThreadRequest) (*service.GetReplyThreadResponse, error) {
	l := logic.NewGetReplyThreadLogic(ctx, s.svcCtx)
	return l.GetReplyThread(in)
}
