// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.4

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	replyCountFieldNames          = builder.RawFieldNames(&ReplyCount{})
	replyCountRows                = strings.Join(replyCountFieldNames, ",")
	replyCountRowsExpectAutoSet   = strings.Join(stringx.Remove(replyCountFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	replyCountRowsWithPlaceHolder = strings.Join(stringx.Remove(replyCountFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cachePostaReplyReplyCountIdPrefix            = "cache:postaReply:replyCount:id:"
	cachePostaReplyReplyCountBizIdTargetIdPrefix = "cache:postaReply:replyCount:bizId:targetId:"
)

type (
	replyCountModel interface {
		Insert(ctx context.Context, data *ReplyCount) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ReplyCount, error)
		FindOneByBizIdTargetId(ctx context.Context, bizId string, targetId int64) (*ReplyCount, error)
		Update(ctx context.Context, data *ReplyCount) error
		Delete(ctx context.Context, id int64) error
	}

	defaultReplyCountModel struct {
		sqlc.CachedConn
		table string
	}

	ReplyCount struct {
		Id         int64     `db:"id"`          // 主键ID
		BizId      string    `db:"biz_id"`      // 业务ID
		TargetId   int64     `db:"target_id"`   // 评论目标id
		ReplyNum   int64     `db:"reply_num"`   // 评论总数
		CreateTime time.Time `db:"create_time"` // 创建时间
		UpdateTime time.Time `db:"update_time"` // 最后修改时间
	}
)

func newReplyCountModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultReplyCountModel {
	return &defaultReplyCountModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`reply_count`",
	}
}

func (m *defaultReplyCountModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	postaReplyReplyCountBizIdTargetIdKey := fmt.Sprintf("%s%v:%v", cachePostaReplyReplyCountBizIdTargetIdPrefix, data.BizId, data.TargetId)
	postaReplyReplyCountIdKey := fmt.Sprintf("%s%v", cachePostaReplyReplyCountIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, postaReplyReplyCountBizIdTargetIdKey, postaReplyReplyCountIdKey)
	return err
}

func (m *defaultReplyCountModel) FindOne(ctx context.Context, id int64) (*ReplyCount, error) {
	postaReplyReplyCountIdKey := fmt.Sprintf("%s%v", cachePostaReplyReplyCountIdPrefix, id)
	var resp ReplyCount
	err := m.QueryRowCtx(ctx, &resp, postaReplyReplyCountIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", replyCountRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultReplyCountModel) FindOneByBizIdTargetId(ctx context.Context, bizId string, targetId int64) (*ReplyCount, error) {
	postaReplyReplyCountBizIdTargetIdKey := fmt.Sprintf("%s%v:%v", cachePostaReplyReplyCountBizIdTargetIdPrefix, bizId, targetId)
	var resp ReplyCount
	err := m.QueryRowIndexCtx(ctx, &resp, postaReplyReplyCountBizIdTargetIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `biz_id` = ? and `target_id` = ? limit 1", replyCountRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, bizId, targetId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultReplyCountModel) Insert(ctx context.Context, data *ReplyCount) (sql.Result, error) {
	postaReplyReplyCountBizIdTargetIdKey := fmt.Sprintf("%s%v:%v", cachePostaReplyReplyCountBizIdTargetIdPrefix, data.BizId, data.TargetId)
	postaReplyReplyCountIdKey := fmt.Sprintf("%s%v", cachePostaReplyReplyCountIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, replyCountRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.BizId, data.TargetId, data.ReplyNum)
	}, postaReplyReplyCountBizIdTargetIdKey, postaReplyReplyCountIdKey)
	return ret, err
}

func (m *defaultReplyCountModel) Update(ctx context.Context, newData *ReplyCount) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	postaReplyReplyCountBizIdTargetIdKey := fmt.Sprintf("%s%v:%v", cachePostaReplyReplyCountBizIdTargetIdPrefix, data.BizId, data.TargetId)
	postaReplyReplyCountIdKey := fmt.Sprintf("%s%v", cachePostaReplyReplyCountIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, replyCountRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.BizId, newData.TargetId, newData.ReplyNum, newData.Id)
	}, postaReplyReplyCountBizIdTargetIdKey, postaReplyReplyCountIdKey)
	return err
}

func (m *defaultReplyCountModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cachePostaReplyReplyCountIdPrefix, primary)
}

func (m *defaultReplyCountModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", replyCountRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultReplyCountModel) tableName() string {
	return m.table
}
