// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.4

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	replyFieldNames          = builder.RawFieldNames(&Reply{})
	replyRows                = strings.Join(replyFieldNames, ",")
	replyRowsExpectAutoSet   = strings.Join(stringx.Remove(replyFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	replyRowsWithPlaceHolder = strings.Join(stringx.Remove(replyFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cachePostaReplyReplyIdPrefix = "cache:postaReply:reply:id:"
)

type (
	replyModel interface {
		Insert(ctx context.Context, data *Reply) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Reply, error)
		Update(ctx context.Context, data *Reply) error
		Delete(ctx context.Context, id int64) error
	}

	defaultReplyModel struct {
		sqlc.CachedConn
		table string
	}

	Reply struct {
		Id            int64     `db:"id"`               // 主键ID
		BizId         string    `db:"biz_id"`           // 业务ID
		TargetId      int64     `db:"target_id"`        // 评论目标id
		ReplyUserId   int64     `db:"reply_user_id"`    // 评论用户ID
		BeReplyUserId int64     `db:"be_reply_user_id"` // 被回复用户ID
		ParentId      int64     `db:"parent_id"`        // 父评论ID
		RootReplyId   int64     `db:"root_reply_id"`    // 查看对话功能的根评论ID
		Content       string    `db:"content"`          // 内容
		Status        int64     `db:"status"`           // 状态 0:正常 1:删除
		LikeNum       int64     `db:"like_num"`         // 点赞数
		CreateTime    time.Time `db:"create_time"`      // 创建时间
	}
)

func newReplyModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultReplyModel {
	return &defaultReplyModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`reply`",
	}
}

func (m *defaultReplyModel) Delete(ctx context.Context, id int64) error {
	postaReplyReplyIdKey := fmt.Sprintf("%s%v", cachePostaReplyReplyIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, postaReplyReplyIdKey)
	return err
}

func (m *defaultReplyModel) FindOne(ctx context.Context, id int64) (*Reply, error) {
	postaReplyReplyIdKey := fmt.Sprintf("%s%v", cachePostaReplyReplyIdPrefix, id)
	var resp Reply
	err := m.QueryRowCtx(ctx, &resp, postaReplyReplyIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", replyRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultReplyModel) Insert(ctx context.Context, data *Reply) (sql.Result, error) {
	postaReplyReplyIdKey := fmt.Sprintf("%s%v", cachePostaReplyReplyIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, replyRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.BizId, data.TargetId, data.ReplyUserId, data.BeReplyUserId, data.ParentId, data.RootReplyId, data.Content, data.Status, data.LikeNum)
	}, postaReplyReplyIdKey)
	return ret, err
}

func (m *defaultReplyModel) Update(ctx context.Context, data *Reply) error {
	postaReplyReplyIdKey := fmt.Sprintf("%s%v", cachePostaReplyReplyIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, replyRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.BizId, data.TargetId, data.ReplyUserId, data.BeReplyUserId, data.ParentId, data.RootReplyId, data.Content, data.Status, data.LikeNum, data.Id)
	}, postaReplyReplyIdKey)
	return err
}

func (m *defaultReplyModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cachePostaReplyReplyIdPrefix, primary)
}

func (m *defaultReplyModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", replyRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultReplyModel) tableName() string {
	return m.table
}
