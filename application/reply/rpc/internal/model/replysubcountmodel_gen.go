// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.4

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	replySubCountFieldNames          = builder.RawFieldNames(&ReplySubCount{})
	replySubCountRows                = strings.Join(replySubCountFieldNames, ",")
	replySubCountRowsExpectAutoSet   = strings.Join(stringx.Remove(replySubCountFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	replySubCountRowsWithPlaceHolder = strings.Join(stringx.Remove(replySubCountFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cachePostaReplyReplySubCountIdPrefix            = "cache:postaReply:replySubCount:id:"
	cachePostaReplyReplySubCountBizIdParentIdPrefix = "cache:postaReply:replySubCount:bizId:parentId:"
)

type (
	replySubCountModel interface {
		Insert(ctx context.Context, data *ReplySubCount) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ReplySubCount, error)
		FindOneByBizIdParentId(ctx context.Context, bizId string, parentId int64) (*ReplySubCount, error)
		Update(ctx context.Context, data *ReplySubCount) error
		Delete(ctx context.Context, id int64) error
	}

	defaultReplySubCountModel struct {
		sqlc.CachedConn
		table string
	}

	ReplySubCount struct {
		Id          int64     `db:"id"`            // 主键ID
		BizId       string    `db:"biz_id"`        // 业务ID
		ParentId    int64     `db:"parent_id"`     // 一级评论ID
		SubReplyNum int64     `db:"sub_reply_num"` // 该评论的回复数量
		CreateTime  time.Time `db:"create_time"`
		UpdateTime  time.Time `db:"update_time"`
	}
)

func newReplySubCountModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultReplySubCountModel {
	return &defaultReplySubCountModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`reply_sub_count`",
	}
}

func (m *defaultReplySubCountModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	postaReplyReplySubCountBizIdParentIdKey := fmt.Sprintf("%s%v:%v", cachePostaReplyReplySubCountBizIdParentIdPrefix, data.BizId, data.ParentId)
	postaReplyReplySubCountIdKey := fmt.Sprintf("%s%v", cachePostaReplyReplySubCountIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, postaReplyReplySubCountBizIdParentIdKey, postaReplyReplySubCountIdKey)
	return err
}

func (m *defaultReplySubCountModel) FindOne(ctx context.Context, id int64) (*ReplySubCount, error) {
	postaReplyReplySubCountIdKey := fmt.Sprintf("%s%v", cachePostaReplyReplySubCountIdPrefix, id)
	var resp ReplySubCount
	err := m.QueryRowCtx(ctx, &resp, postaReplyReplySubCountIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", replySubCountRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultReplySubCountModel) FindOneByBizIdParentId(ctx context.Context, bizId string, parentId int64) (*ReplySubCount, error) {
	postaReplyReplySubCountBizIdParentIdKey := fmt.Sprintf("%s%v:%v", cachePostaReplyReplySubCountBizIdParentIdPrefix, bizId, parentId)
	var resp ReplySubCount
	err := m.QueryRowIndexCtx(ctx, &resp, postaReplyReplySubCountBizIdParentIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `biz_id` = ? and `parent_id` = ? limit 1", replySubCountRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, bizId, parentId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultReplySubCountModel) Insert(ctx context.Context, data *ReplySubCount) (sql.Result, error) {
	postaReplyReplySubCountBizIdParentIdKey := fmt.Sprintf("%s%v:%v", cachePostaReplyReplySubCountBizIdParentIdPrefix, data.BizId, data.ParentId)
	postaReplyReplySubCountIdKey := fmt.Sprintf("%s%v", cachePostaReplyReplySubCountIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, replySubCountRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.BizId, data.ParentId, data.SubReplyNum)
	}, postaReplyReplySubCountBizIdParentIdKey, postaReplyReplySubCountIdKey)
	return ret, err
}

func (m *defaultReplySubCountModel) Update(ctx context.Context, newData *ReplySubCount) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	postaReplyReplySubCountBizIdParentIdKey := fmt.Sprintf("%s%v:%v", cachePostaReplyReplySubCountBizIdParentIdPrefix, data.BizId, data.ParentId)
	postaReplyReplySubCountIdKey := fmt.Sprintf("%s%v", cachePostaReplyReplySubCountIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, replySubCountRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.BizId, newData.ParentId, newData.SubReplyNum, newData.Id)
	}, postaReplyReplySubCountBizIdParentIdKey, postaReplyReplySubCountIdKey)
	return err
}

func (m *defaultReplySubCountModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cachePostaReplyReplySubCountIdPrefix, primary)
}

func (m *defaultReplySubCountModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", replySubCountRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultReplySubCountModel) tableName() string {
	return m.table
}
