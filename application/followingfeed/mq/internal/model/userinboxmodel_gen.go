// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.4

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userInboxFieldNames          = builder.RawFieldNames(&UserInbox{})
	userInboxRows                = strings.Join(userInboxFieldNames, ",")
	userInboxRowsExpectAutoSet   = strings.Join(stringx.Remove(userInboxFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userInboxRowsWithPlaceHolder = strings.Join(stringx.Remove(userInboxFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	userInboxModel interface {
		Insert(ctx context.Context, data *UserInbox) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserInbox, error)
		FindOneByUserIdSenderIdArticleId(ctx context.Context, userId int64, senderId int64, articleId int64) (int64, error)
		Update(ctx context.Context, data *UserInbox) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserInboxModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserInbox struct {
		Id          int64     `db:"id"`
		UserId      int64     `db:"user_id"`      // 收件人
		ArticleId   int64     `db:"article_id"`   // 推送动态的文章ID
		SenderId    int64     `db:"sender_id"`    // 动态作者ID
		Status      int64     `db:"status"`       // 状态 0:待审核 1:审核不通过 2:可见 3:用户删除或者取消关注而删除
		PublishTime time.Time `db:"publish_time"` // 动态推入时间
		IsRead      int64     `db:"is_read"`      // 0未读、1已读
	}
)

func newUserInboxModel(conn sqlx.SqlConn) *defaultUserInboxModel {
	return &defaultUserInboxModel{
		conn:  conn,
		table: "`user_inbox`",
	}
}

func (m *defaultUserInboxModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserInboxModel) FindOne(ctx context.Context, id int64) (*UserInbox, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userInboxRows, m.table)
	var resp UserInbox
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserInboxModel) FindOneByUserIdSenderIdArticleId(ctx context.Context, userId int64, senderId int64, articleId int64) (int64, error) {
	//var resp UserInbox
	//query := fmt.Sprintf("select %s from %s where `user_id` = ? and `sender_id` = ? and `article_id` = ? limit 1", userInboxRows, m.table)
	//err := m.conn.QueryRowCtx(ctx, &resp, query, userId, senderId, articleId)
	//switch err {
	//case nil:
	//	return &resp, nil
	//case sqlx.ErrNotFound:
	//	return nil, ErrNotFound
	//default:
	//	return nil, err
	//}
	var id int64
	query := fmt.Sprintf("select `id` from %s where `user_id` = ? and `sender_id` = ? and `article_id` = ? limit 1", m.table)
	err := m.conn.QueryRowCtx(ctx, &id, query, userId, senderId, articleId)
	switch err {
	case nil:
		return id, nil
	case sqlx.ErrNotFound:
		return 0, ErrNotFound
	default:
		return 0, err
	}
}

func (m *defaultUserInboxModel) Insert(ctx context.Context, data *UserInbox) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, userInboxRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.ArticleId, data.SenderId, data.Status, data.PublishTime, data.IsRead)
	return ret, err
}

func (m *defaultUserInboxModel) Update(ctx context.Context, newData *UserInbox) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userInboxRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.UserId, newData.ArticleId, newData.SenderId, newData.Status, newData.PublishTime, newData.IsRead, newData.Id)
	return err
}

func (m *defaultUserInboxModel) tableName() string {
	return m.table
}
